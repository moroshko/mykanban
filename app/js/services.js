// Generated by CoffeeScript 1.4.0
"use strict";

angular.module('myApp.services', []).factory('keyUpService', function($rootScope) {
  var service;
  service = {
    event: null
  };
  service.keyup = function($event) {
    if ($('textarea:focus, [contenteditable]:focus').length > 0) {
      return;
    }
    if ($('input[type="text"]:focus, .modal:visible').length > 0 && $event.which !== 13) {
      return;
    }
    this.event = $event;
    return $rootScope.$broadcast('keyup');
  };
  return service;
});

angular.module('myApp.services').factory('appService', [
  '$rootScope', '$location', function($rootScope, $location) {
    var authClient, authenticating, authenticationError, boardRef, currentUserId, deferred, redirectAfterLogin, rootRef, sortedUsers, users, usersRef;
    rootRef = new Firebase('https://mykanban.firebaseio.com');
    usersRef = rootRef.child('users');
    boardRef = rootRef.child('board');
    currentUserId = null;
    authenticating = false;
    authenticationError = null;
    redirectAfterLogin = '/board';
    users = {};
    sortedUsers = [];
    deferred = $.Deferred();
    authClient = new FirebaseAuthClient(rootRef, function(error, user) {
      authenticating = false;
      authenticationError = null;
      if (error) {
        authenticationError = error.code;
        currentUserId = null;
      } else if (user) {
        currentUserId = user.id;
        usersRef.on('value', function(snapshot) {
          var userData, userId;
          users = snapshot.val();
          for (userId in users) {
            userData = users[userId];
            sortedUsers.push($.extend({}, {
              id: userId
            }, userData));
          }
          sortedUsers = _.sortBy(sortedUsers, function(user) {
            return user.name;
          });
          deferred.resolve();
          if ($location.path() === '/login') {
            $location.path(redirectAfterLogin);
          }
          if (!$rootScope.$$phase) {
            return $rootScope.$apply();
          }
        });
      } else {
        currentUserId = null;
      }
      if (currentUserId === null) {
        $location.path('/login');
        if (!$rootScope.$$phase) {
          return $rootScope.$apply();
        }
      }
    });
    return {
      userName: function(userId) {
        var _ref;
        return (_ref = users[userId]) != null ? _ref.name : void 0;
      },
      userEmail: function(userId) {
        var _ref;
        return (_ref = users[userId]) != null ? _ref.email : void 0;
      },
      currentUserId: function() {
        return currentUserId;
      },
      currentUserName: function() {
        return this.userName(currentUserId);
      },
      currentUserEmail: function() {
        return this.userEmail(currentUserId);
      },
      sortedUsers: function() {
        return sortedUsers;
      },
      authenticate: function() {
        return deferred.promise();
      },
      isAuthenticating: function() {
        return authenticating;
      },
      authenticationError: function() {
        return authenticationError;
      },
      login: function(email, password, rememberMe) {
        authenticating = true;
        authenticationError = null;
        return authClient.login('password', {
          email: email,
          password: password,
          rememberMe: rememberMe
        });
      },
      logout: function() {
        return authClient.logout();
      },
      createUser: function(name, email, password) {
        return authClient.createUser(email, password, function(error, user) {
          if (error) {
            console.log('Error:');
            return console.log(error);
          } else {
            console.log('User created!');
            console.log(user);
            console.log('User Id: ' + user.id + ', Email: ' + user.email);
            return usersRef.child(user.id).set({
              name: name,
              email: email
            });
          }
        });
      },
      boardRef: function() {
        return boardRef;
      }
    };
  }
]);
