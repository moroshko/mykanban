// Generated by CoffeeScript 1.4.0
"use strict";

var BoardController,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

BoardController = function($scope, $dialog, keyUpService, app) {
  $scope.scope = $scope;
  $scope.app = app;
  $scope.selectedTasks = [];
  $scope.newOrEditedTask = {};
  app.boardRef().on('value', function(snapshot) {
    var board, column, task, _i, _j, _len, _len1, _ref, _ref1;
    board = snapshot.val();
    _ref = board.columns;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      column = _ref[_i];
      if (column.tasks != null) {
        _ref1 = column.tasks;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          task = _ref1[_j];
          if (task.user_ids == null) {
            task.user_ids = [];
          }
        }
      } else {
        column.tasks = [];
      }
    }
    $scope.board = board;
    if (!$scope.$$phase) {
      return $scope.$apply();
    }
  });
  $scope.$watch('board', function(newBoard, oldBoard) {
    if (oldBoard != null) {
      newBoard = angular.fromJson(angular.toJson(newBoard));
      return app.boardRef().set(newBoard);
    }
  }, true);
  $scope.taskClasses = function(task) {
    var classes;
    classes = ['task'];
    classes.push(task.status);
    if ($scope.isTaskSelected(task)) {
      classes.push('selected');
    }
    return classes.join(' ');
  };
  $scope.isTaskSelected = function(task) {
    return __indexOf.call($scope.selectedTasks, task) >= 0;
  };
  $scope.taskClicked = function($event, task) {
    var commandPressed, index;
    if (!($event != null)) {
      $scope.selectedTasks = [];
      return;
    }
    $event.stopPropagation();
    commandPressed = $event.metaKey || $event.ctrlKey;
    if (commandPressed) {
      if ($scope.isTaskSelected(task)) {
        index = $scope.selectedTasks.indexOf(task);
        return $scope.selectedTasks.splice(index, 1);
      } else {
        return $scope.selectedTasks.push(task);
      }
    } else {
      if ($scope.selectedTasks.length === 1 && $scope.isTaskSelected(task)) {
        return $scope.selectedTasks = [];
      } else {
        return $scope.selectedTasks = [task];
      }
    }
  };
  $scope.setTaskStatus = function(task, status, blockReason) {
    if (blockReason == null) {
      blockReason = '';
    }
    task.status = status;
    if (status === 'blocked') {
      return task.block_reason = blockReason;
    } else {
      return task.block_reason = '';
    }
  };
  $scope.$on('keyup', function() {
    switch (keyUpService.event.which) {
      case 66:
        if ($scope.isBlockTaskPossible()) {
          return $scope.openBlockTaskDialog();
        }
        break;
      case 68:
        if ($scope.selectedTasks.length > 0) {
          return $scope.deleteTasksConfirmation = true;
        }
        break;
      case 69:
        if ($scope.selectedTasks.length === 1) {
          return $scope.openEditTaskDialog();
        }
        break;
      case 78:
        return $scope.openNewTaskDialog();
      case 80:
        if ($scope.isPullTaskPossible()) {
          return $scope.pullTask();
        }
        break;
      case 85:
        if ($scope.isUnblockTaskPossible()) {
          return $scope.unblockTask();
        }
    }
  });
  $scope.taskMoved = function(event, ui) {
    if (ui.sender != null) {
      return;
    }
    return $scope.selectedTasks = [];
  };
  $scope.openNewTaskDialog = function($event, column) {
    if ($event != null) {
      $event.stopPropagation();
    }
    if (column != null) {
      $scope.newTaskColumn = column;
    } else {
      $scope.newTaskColumn = $scope.board.columns[0];
    }
    $scope.newOrEditedTask = {
      title: '',
      description: '',
      status: 'default',
      user_ids: []
    };
    $scope.selectedTasks = [];
    $scope.header = 'New Task';
    return $scope.newEditTaskDialog = true;
  };
  $scope.openEditTaskDialog = function() {
    $scope.newTaskColumn = null;
    $scope.newOrEditedTask = $.extend(true, {}, $scope.selectedTasks[0]);
    $scope.header = 'Edit Task';
    return $scope.newEditTaskDialog = true;
  };
  $scope.newEditTask = function() {
    if ($scope.newOrEditedTask.status !== 'blocked') {
      $scope.newOrEditedTask.block_reason = '';
    }
    if ($scope.newTaskColumn != null) {
      $scope.newTaskColumn.tasks.push($scope.newOrEditedTask);
    } else {
      $.extend($scope.selectedTasks[0], $scope.newOrEditedTask);
      $scope.selectedTasks = [];
    }
    return $scope.newEditTaskDialog = false;
  };
  $scope.isBlockTaskPossible = function() {
    return $scope.selectedTasks.length === 1 && $scope.selectedTasks[0].status !== 'blocked';
  };
  $scope.openBlockTaskDialog = function() {
    $scope.blockReason = '';
    return $scope.blockTaskDialog = true;
  };
  $scope.blockTask = function() {
    var task;
    task = $scope.selectedTasks[0];
    $scope.setTaskStatus(task, 'blocked', $scope.blockReason);
    $scope.selectedTasks = [];
    return $scope.blockTaskDialog = false;
  };
  $scope.isUnblockTaskPossible = function() {
    return $scope.selectedTasks.length === 1 && $scope.selectedTasks[0].status === 'blocked';
  };
  $scope.unblockTask = function() {
    var task;
    task = $scope.selectedTasks[0];
    $scope.setTaskStatus(task, 'default');
    task.user_ids = [app.currentUserId()];
    return $scope.selectedTasks = [];
  };
  $scope.deleteTasks = function() {
    var column, _i, _len, _ref;
    _ref = $scope.board.columns;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      column = _ref[_i];
      column.tasks = column.tasks.filter(function(task) {
        return __indexOf.call($scope.selectedTasks, task) < 0;
      });
    }
    $scope.selectedTasks = [];
    return $scope.deleteTasksConfirmation = false;
  };
  $scope.isPullTaskPossible = function() {
    var column, columnIndex, task, taskIndex, _i, _len, _ref;
    if ($scope.selectedTasks.length !== 1) {
      return false;
    }
    task = $scope.selectedTasks[0];
    _ref = $scope.board.columns;
    for (columnIndex = _i = 0, _len = _ref.length; _i < _len; columnIndex = ++_i) {
      column = _ref[columnIndex];
      taskIndex = column.tasks.indexOf(task);
      if (taskIndex !== -1) {
        $scope.pulledTaskIndex = taskIndex;
        $scope.pulledTask = task;
        $scope.pulledTaskColumnIndex = columnIndex;
        $scope.pulledTaskColumn = column;
        return columnIndex < $scope.board.columns.length - 1;
      }
    }
    return false;
  };
  return $scope.pullTask = function() {
    $scope.setTaskStatus($scope.pulledTask, 'default');
    $scope.pulledTask.user_ids = [app.currentUserId()];
    $scope.pulledTaskColumn.tasks.splice($scope.pulledTaskIndex, 1);
    $scope.board.columns[$scope.pulledTaskColumnIndex + 1].tasks.push($scope.pulledTask);
    return $scope.selectedTasks = [];
  };
};

BoardController.$inject = ['$scope', '$dialog', 'keyUpService', 'appService'];
